Now we are going to work with the webhook with clerk.

    So to setup the webhook, we need to make the connection between the clerk and the internet conection.

    To setup:

        1. Go to webhooks in the clerk:
        2. Add new webhook
        3. Now the endpoints paste the ngrok urls:
        4. At the end of the url add this: "/api/webhooks/clerk" - this is very important
        5. On the message filtering go and select user and add: user.create,user.deleted,user.updated
        6. And click create.

Now thw connection build but its not complete until the signing secret key is added to the .env

    Copy the signing key and paste it on the .env:

        .env:

            CLERK_WEBHOOK_SECRET="secret key here!"

            Now we want to install svix: The svix only need for developments:

                "npm i svix"

                and the svix installed:

                Okay, now we need to setup/connect the webhook to our app:

                    So now we need to code for the webhook connection to the app:

                        Create a "api" folder inside of the "app" folder

                            folders: This folder is created as exactly what we added to the endpoint url: on step 4 in webhook setup: "/api/webhooks/clerk"

                                   Code:
                                   
                                     app/api/webooks/clerk/route.ts:

                                            
                                            import { Webhook } from 'svix'
                                            import { headers } from 'next/headers'
                                            import { WebhookEvent } from '@clerk/nextjs/server'
                                            import { db } from '@/lib/db'

                                            export async function POST(req: Request) {
                                            // You can find this in the Clerk Dashboard -> Webhooks -> choose the endpoint
                                            const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET

                                            if (!WEBHOOK_SECRET) {
                                                throw new Error('Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local')
                                            }

                                            // Get the headers
                                            const headerPayload = headers()
                                            const svix_id = headerPayload.get('svix-id')
                                            const svix_timestamp = headerPayload.get('svix-timestamp')
                                            const svix_signature = headerPayload.get('svix-signature')

                                            // If there are no headers, error out
                                            if (!svix_id || !svix_timestamp || !svix_signature) {
                                                return new Response('Error occured -- no svix headers', {
                                                status: 400,
                                                })
                                            }

                                            // Get the body
                                            const payload = await req.json()
                                            const body = JSON.stringify(payload)

                                            // Create a new Svix instance with your secret.
                                            const wh = new Webhook(WEBHOOK_SECRET)

                                            let evt: WebhookEvent

                                            // Verify the payload with the headers
                                            try {
                                                evt = wh.verify(body, {
                                                'svix-id': svix_id,
                                                'svix-timestamp': svix_timestamp,
                                                'svix-signature': svix_signature,
                                                }) as WebhookEvent
                                            } catch (err) {
                                                console.error('Error verifying webhook:', err)
                                                return new Response('Error occured', {
                                                status: 400,
                                                })
                                            }

                                            // Do something with the payload
                                            // For this guide, you simply log the payload to the console
                                            
                                            const eventType = evt.type
                                            // console.log(`Webhook with and ID of ${id} and type of ${eventType}`)
                                            // //console.log('Webhook body:', body)

                                            try {
                                                if (eventType === "user.created") {
                                                await db.user.create({
                                                    data: {
                                                    externalUserId: payload.data.id,
                                                    username: payload.data.username,
                                                    imageUrl: payload.data.image_url,
                                                    email: payload.data.email,
                                                    }
                                                });
                                                }

                                                if (eventType === "user.updated") {
                                                await db.user.update({
                                                    where: {
                                                    externalUserId: payload.data.id,
                                                    },
                                                    data: {
                                                    username: payload.data.username,
                                                    imageUrl: payload.data.image_url,
                                                    },
                                                });
                                                }
                                                if (eventType ==="user.deleted")
                                                {
                                                await db.user.delete({
                                                    where: {
                                                    externalUserId: payload.data.id,
                                                    },
                                                });
                                                }
                                            } catch (error) {
                                                console.error("Error saving user to database:", error);
                                                return new Response('Database Error', { status: 500 });
                                            }

                                            return new Response('', { status: 200 })
                                            }


    Now the webhook connection is succesfully completed with connection to database while haveing user crud operations.