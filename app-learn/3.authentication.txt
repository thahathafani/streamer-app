Here we are going to create a authentication page for both signin and registration.

For authentication we gone use the Clerk auth.
The Clerk auth is usefull for authentication, which helps to make authentication in some steps.

    Steps for authentication:

        1. Signin to Clerk
        2. Click add application
        3. Name the application and select the auth methods(email,username,phone number) want.
        4. Click create application
        5. Copy the environment keys from the api keys and paste it into .env
        6. before going to paste it on .env (if we not add .env in gitignore: it effects the privacy):
                1. Go to .gitignore
                2. Move to "# local env files" in .gitignore
                3. add ".env" there
                4. At root of the project create a ".env" file.
                5. paste the copyied api key from "Clerk".

            code: 
                .env

                    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=key-here
                    CLERK_SECRET_KEY=key-here

        Now we done everything, but the clerk doesn't have access to the project:

            So moving to the Docs in clerk: Add authentication and user management to your NextJs App with clerk
            

            So we need to install the Clerk inside the project

                1. "npm i @clerk/nextjs" on terminal
                2. Now set the env keys: we already did that.
                3. Now we need to wrap our project with "<clerkprovider></clerkprovider>"
                4. To wrap the project: as i know that the "layout" is the major point where i need to do the complete project layout things

                    code: The ClerkProvider wrap everything as per the condions on outside the <html> tag:

                        app>layout.tsx:

                            import { ClerkProvider } from '@clerk/nextjs'
                            import { dark } from '@clerk/themes';
                            import { ThemeProvider } from 'next-themes';
                            import type { Metadata } from "next";
                            import { Inter } from "next/font/google";
                            import { Toaster } from "sonner";
                            import "./globals.css";

                            const inter = Inter({ subsets: ["latin"] });

                            export const metadata: Metadata = {
                                title: "App",
                                description: "Generated by create next app",
                            };

                            export default function RootLayout({
                                children,
                                }: Readonly<{
                                children: React.ReactNode;
                                }>) {
                                        return (
                                            <ClerkProvider appearance={{ baseTheme: dark }}>
                                            <html lang="en">
                                            <body className={inter.className}>
                                               {<ThemeProvider 
                                                attribute="class"
                                                forcedTheme='dark'
                                                storageKey='stream-app-theme'
                                                >}
                                                <Toaster theme='light' position="bottom-center" />
                                                {children}
                                                {</ThemeProvider>}
                                            </body>
                                            </html>
                                            </ClerkProvider>
                                            
                                        );
                            }

        Now the code doesn't work properly:

            Because we need to add the middleware to it:

                    To do that copy the content from the middleware and paste it on the middleware.ts(which created on the root of the project)

                        code:

                            middleware.ts

                                import { clerkMiddleware } from '@clerk/nextjs/server'

                                // Make sure that the `/api/webhooks/(.*)` route is not protected here
                                export default clerkMiddleware({
                                publicRoutes: ["/api/webhooks(.*)"]
                                });

                                export const config = {
                                matcher: [
                                    // Skip Next.js internals and all static files, unless found in search params
                                    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
                                    // Always run for API routes
                                    '/(api|trpc)(.*)',
                                ],
                                }

                    Now we have setup the "Clerk" but we need to add the signin and signup page:

                        To add signin and signup page:

                            1. we have to create a route in app folder
                            2. Create a (auth) folder in app folder
                            3. Then create a seprate signin and signup folder for both in tha auth folder.
                            4. Then create a page.tsx for both folders with seprate routing method(eg: [[...sign-in]])
                            5. In the page.tsx you can create a custom login and register pages, but here we created a same code as from the "Clerk auth".

                                Code: 

                                    sign-in:[[...sign-in]]:page.tsx:

                                                import { SignIn } from '@clerk/nextjs'

                                                    export default function Page() {
                                                    return <SignIn />
                                                    }

                                    sign-up:[[...sign-up]]:page.tsx:

                                                import { SignUp } from '@clerk/nextjs'

                                                    export default function Page() {
                                                    return <SignUp />
                                                    }

                                Now we setted everythingvery well and organized, but we have to added the sign-in sign-up inside of the .env:

                                    To do so, we have to copy the Clerk url's.

                                        Code:

                                            .env:

                                                NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in      Here the sign-in done with the aspects of the file routhing(page.tsx from the sign-in folder)
                                                NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
                                                NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
                                                NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/

                                        
                                            Now we setted the complete signin and signup with the clerk auth.

        In here the people who done their sign-in can only be see the home/Dashboard of the website.
        This will works very well on by doing sign-in and sign-up.
        But, still we facing an issue over the UI of the auth pages.

            The auth pages are setted on the left corner, we have to redesign it.

                1. Go tho auth folder
                2. create a layout.tsx file to redesign the entire auth pages.
                3. Go to the globals.css to add:

                    code: 

                            globals.css: This is the code to make the layout height full.

                                html,
                                body,
                                :root {
                                    height: 100%;
                                }
                    
                4. Now add the code in layout.tsx:

                    Code: 

                        layout.tsx:

                            const AuthLayout = ({
                                children
                            }: {
                                children: React. ReactNode;
                            }) => { 
                                return(
                                    <div className="h-full flex items-center
                                        justify-center">
                                            {children}
                                    </div>
                                );
                            };
                            export default AuthLayout;

        Here the complete code added to make the content in proper layouts:



