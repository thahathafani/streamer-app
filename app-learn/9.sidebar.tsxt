Now we going in deep to the sidebar section: 
    Its an a kind of sidebar wich can collaps and drag, 
     the use of this sidebar is to make the list of followers, and recommeded followers.


    Now craete a folder sidebar inside the (home)/_component folder

        And craete a file index.tsx as the main page of the sidebar:

            Code:

                export const Sidebar => () {
                return ( 
                    <div> 
                        Sidebar!
                    </div>
                );
                }

        Now we can add the sidebar component to the layout as "<Sidebar />"

Now we just rechange the common design of the sidebar to a collaps or drag method: for the we need to change the div into the wrapper tag:
            
            import { Wrapper } from "./wrapper";

            export const Sidebar = async () => {
                return(
                    <Wrapper>
                            <div className="space-y-4 lg:pt-0">
                                Sidebar
                            </div>
                    </Wrapper>
                );
            };

    But we are not created any wrapper for this to make the drag n drop method:

        (browse)/_component/sidebar/wrapper.tsx:

            interface WrapperProps {
            children: React. ReactNode;
            };
            export const Wrapper = ({
            children,
            }: WrapperProps) => {
                return (
                    <aside>
                        (children)
                    </aside>
                )
            }

Now we want to install zustand: for making the drag n drop method

    For that we are:

                    npm i zustand
                
        after that we need to make the zustand with proper functionality:

            on the root folder create a folder "store" and make a file "use-sidebarf.ts"

                On that:'

                        Code:

                            import {create } from "zustand";

                            interface SidebarStore {
                                collapsed: boolean;
                                onExpand: () => void;
                                onCollapse: () => void;
                            };

                            export const useSidebar = create<SidebarStore>((set) => ({
                                collapsed: false,
                                onExpand: () => set(() => ({ collapsed: false})),
                                onCollapse: () => set(() => ({ collapsed: true }))
                            }))

                    From this we have, assigned the methods:

                                collaps: setted as false which is the collaps is not the pripary activity
                                and onExpand: setted as also "false"
                                and the onCollapse: is the setted as true, which is, when the onCollapse is "True" the collaps will happen:

                    Now we done the basic settup for the collaps & expand with zustand

    Now we are going to work with Toggle:

        The Toggle which helps to drag and drop the sidebar:

            Code:

                (broswe)/_component/sidebar/toggle.tsx:

                        "use client";

                        import { ArrowLeftFromLine, ArrowRightFromLine } from 'lucide-react';
                        import { Button } from '@/components/ui/button';
                        import { useSidebar } from '@/store/use-sidebar'
                        import React from 'react'
                        import { Hint } from '@/components/hint';
                        import { Skeleton } from '@/components/ui/skeleton';

                        const Toggle = () => {
                            const {
                                collapsed,
                                onExpand,
                                onCollapse
                            } = useSidebar((state) => state);
                            const lable = collapsed ? "Expand" : "Collapse";
                        return (
                            <>
                            {collapsed && (
                                <div className="hidden lg:flex w-full items-center justify-center pt-4 mb-4">
                                    <Hint lable={lable} side="right" asChild>
                                        <Button onClick={onExpand} className="h-auto p-2 ml-auto" variant="ghost">
                                            <ArrowRightFromLine className=" h-4 w-4"/>
                                        </Button>
                                    </Hint>

                                </div>
                            )}
                            {!collapsed && (
                                <div className='p-3 pl-6 mb-2 flex items-center w-full'>
                                    <p className='font-semibold text-primary'>
                                        Channels
                                    </p>
                                    <Hint lable={lable} side="right" asChild>
                                        <Button onClick={onCollapse} className="h-auto p-2 ml-auto" variant="ghost">
                                            <ArrowLeftFromLine className=" h-4 w-4"/>
                                        </Button>
                                    </Hint>
                                    

                                </div>
                            )}
                            </>
                        )
                        }

                        export const ToggleSkeleton = () => {
                            return(
                                <div className="p-3 pl-6 mb-2 hidden lg:flex items-center justify-between w-full">
                                    <Skeleton className="h-6 w-[100px]"/>
                                    <Skeleton className='h-6 w-6'/>
                                </div>
                            )
                        }

                        export default Toggle


        Here we completely added the toggle for the operation of the toggle with Button:


        The overall work is done, but we just need to maker the app more simple and user friendly:

            So that, we need to make an hint over the Toggle button(arrow button).

                So we need to install the Tooltip from the npm:

                npm i tooltip:

                    and after that we just need to create an seprate from with the component folder from the root dir:

                        componenets/ui/hint.tsx:

                                import {
                                    Tooltip,
                                    TooltipContent,
                                    TooltipProvider,
                                    TooltipTrigger
                                } from "@/components/ui/tooltip";

                                interface HintProps {
                                    lable: string;
                                    children: React.ReactNode;
                                    asChild?: boolean;
                                    side?: "top" | "bottom" | "left" | "right"
                                    align?: "start" | "center" | "end";

                                }

                                export const Hint = ({
                                    lable,
                                    children,
                                    asChild,
                                    side,
                                    align,
                                }: HintProps) => {
                                    return (
                                        <TooltipProvider>
                                            <Tooltip delayDuration={0}>
                                                <TooltipTrigger asChild={asChild}>
                                                    {children}
                                                </TooltipTrigger>
                                                <TooltipContent className="text-black bg-white"
                                                                align={align}
                                                                side={side}
                                                >
                                                    <p className="font-semibold">
                                                        {lable}
                                                    </p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )
                                }

            The Hint for the arrow button is done.


Now the overall work is done with it, but i have to work with the home page: because the home page contents are coverd by the sidebar contents:

    To do so we have to make change in browse layout:

        to do the we have to wrapp the "{children}" in the broswe layout with seprate component: as <container>{children}<container/>


            Code:

                    app/(browse)/_component/container.tsx:

                            "use client";

                            import { useEffect } from 'react';
                            import { useMediaQuery } from 'usehooks-ts';
                            import { cn } from '@/lib/utils';
                            import { useSidebar } from '@/store/use-sidebar';

                            interface ContainerProps {
                                children: React.ReactNode;
                            };

                            export const Container = ({
                                children,
                            }: ContainerProps) => {
                                const matches = useMediaQuery("(max-width: 1024px)")
                                const {
                                    collapsed,
                                    onCollapse,
                                    onExpand
                                } = useSidebar((state) => state)

                                useEffect(() => {
                                    if(matches) {
                                        onCollapse();
                                    } else {
                                        onExpand();
                                    }
                                }, [matches, onCollapse,onExpand]);
                            return (
                                <div className={cn(
                                    "flex-1",
                                    collapsed? "ml-[70px]" : "ml-[70px] lg:ml-60"
                                )}>
                                    {children}
                                </div>
                            )
                            }
