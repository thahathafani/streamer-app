In NextJs the routing is a helps to manage the file stactuter as well as page redidection method without refreshing the complete webpage.

    1. How do we know that the "page.tsx" is the root file to shown on the localhost:3000?
    2. Why its only choosen the "page.tsx" as the root?

    To answer this we have,

        The "page.tsx" is indide of the "app" folder. The "app" folder is specially reserved folder in the NextJs.
        The 2nd thing is that this file is named as "page.tsx",the page is a reserved filename in NextJs.
         Itâ€™s tells the router this the file we need to show to the clients.

         -> In a folder "app" there is a page.tsx(extention doesn't matter on file name matters) it will be the "route".
         -> But if there is another file called foo.tsx inside the "app" this wouldn't be a route.


        So how could we work for multiple page?

            -> Here we 1st create a another folder inside of the "app" folder.

                Basic file stactuter
                
                --app
                    --folder
                        ->foo.tsx 
                 ->page.tsx

                 In here, when we try to move on: localhost:3000/folder, it doesn't print foo.tsx:(404: Page not Found!)
                  The reason is that its due to the "page" is the reserved file in Nextjs and it will not show any other named file to the client.
                 So to show the "folder" file to the client we need to rename the "foo.tsx" to "page.tsx".

                    --app
                        --folder
                            ->page.tsx 
                     ->page.tsx

                Now the localhost:3000/folder shows the contents



        ----- Now we work for Layout page ---------

            The layout page is a core page of the app folder: the layout page helps to maitain the overall page stracture. The layout page holdes the children
             of the pages, which is the other pages inside the same folder.

                Let me give you an eg:

                    --auth
                        --login
                            ->page.tsx
                        --register
                            ->page.tsx


                            localhost:3000/auth/login
                            localhost:3000/auth/register

                    Here the pages are navigated but the pages doesn't have a proper stractute, like we can't navigate to the both pages easly,
                        so here we need to add layout. And the layout should run with "children".

                        --auth
                            --login
                                ->page.tsx
                            --register
                                ->page.tsx
                         ->layout.tsx


                        code: 
                            
                            layout.tsx:

                            const AuthLayout = ({
                                children
                                }: {
                                    children: React.ReactNode;
                                }) => {
                                    return (
                                        <div>
                                            {children}
                                        </div>
                                    );
                                }
                                export default AuthLayout;


                    So here we get a proper layout for the both pages: such as login page and register page:

